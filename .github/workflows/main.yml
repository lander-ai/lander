name: "Lift off ðŸš€"

on:
  push:
    branches: [production, staging]

jobs:
  setup:
    permissions:
      contents: write

    runs-on: ubuntu-20.04

    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: git config
        run: |
          git config user.name "github_actions"
          git config user.email "developer@lander1.ai"

      - name: setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 6.32.9

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "pnpm"

      - name: install node dependencies
        run: pnpm i

      - name: bump version
        run: if [ ${GITHUB_REF#refs/heads/} == "production" ]; then pnpm release ; else pnpm release --preRelease=beta; fi

      - name: Merge with development
        run: |
          git checkout development
          git merge ${GITHUB_REF#refs/heads/} -m "chore(release): merge $(git describe --tags `git rev-list --tags --max-count=1`) into development"
          git push origin development

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Release v${process.env.PACKAGE_VERSION}`,
              draft: true,
              prerelease: false
            })
            return data.id

  build:
    needs: setup

    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3

      - name: setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 6.32.9

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "pnpm"

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: setup rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install node dependencies
        run: pnpm i

      - uses: tauri-apps/tauri-action@v0
        with:
          releaseId: ${{ needs.setup.outputs.release_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_STAGE: ${{ vars.STAGE }}
          VITE_STRIPE_PK: ${{ secrets.STRIPE_PK }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
