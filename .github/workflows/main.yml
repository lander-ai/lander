name: "Lift off ðŸš€"

on:
  push:
    branches: [production, staging]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: macos-latest
            target: universal-apple-darwin
            bundles: app dmg updater
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bundles: nsis updater

    runs-on: ${{ matrix.platform.os }}

    environment: ${{ github.ref_name }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.29.1

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "pnpm"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: rustup target add aarch64-apple-darwin

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install NodeJS dependencies
        run: pnpm i --frozen-lockfile --no-verify-store-integrity

      - name: Check git status
        run: git status

      - name: Increment version (*nix)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ vars.STAGE }}" == "production" ]; then
            pnpm release
          else 
            pnpm release --preRelease=preview
          fi

      - name: Increment version (Windows)
        if: runner.os == 'Windows'
        run: |
          if ($env:STAGE -eq "production") {
            pnpm release
          } else {
            pnpm release --preRelease=preview
          }

      - name: Get version (*nix)
        if: runner.os != 'Windows'
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Get version (Windows)
        if: runner.os != 'Windows'
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $env:GITHUB_ENV

      - name: Set updates endpoint
        uses: jossef/action-set-json-field@v2.1
        with:
          file: ./src-tauri/tauri.conf.json
          field: tauri.updater.endpoints
          value: '["${{ vars.UPDATES_ENDPOINT }}"]'
          parse_json: true

      - name: Set app name (staging)
        if: vars.STAGE == 'staging'
        uses: jossef/action-set-json-field@v2.1
        with:
          file: ./src-tauri/tauri.conf.json
          field: package.productName
          value: "Lander (Preview)"

      - name: Build app
        run: pnpm build --target ${{ matrix.platform.target }} --bundles ${{ matrix.platform.bundles }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_STAGE: ${{ vars.STAGE }}
          VITE_STRIPE_PK: ${{ secrets.STRIPE_PK }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          ENABLE_CODE_SIGNING: true
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}

      - uses: actions/upload-artifact@v3
        if: matrix.platform.target == 'universal-apple-darwin'
        with:
          name: artifacts
          path: |
            ./src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app.tar.gz
            ./src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app.tar.gz.sig
            ./src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg

      - uses: actions/upload-artifact@v3
        if: matrix.platform.target == 'x86_64-pc-windows-msvc'
        with:
          name: artifacts
          path: |
            ./src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.nsis.zip
            ./src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.nsis.zip.sig
            ./src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe

  publish:
    needs: build

    permissions:
      contents: write

    runs-on: ubuntu-20.04

    environment: ${{ github.ref_name }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Init git config
        run: |
          git config user.name "github_actions"
          git config user.email "developer@lander1.ai"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.29.1

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "pnpm"

      - name: Install NodeJS dependencies
        run: pnpm i --frozen-lockfile --no-verify-store-integrity

      - name: Increment version (*nix)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ vars.STAGE }}" == "production" ]; then
            pnpm release
          else 
            pnpm release --preRelease=preview
          fi

      - name: Increment version (Windows)
        if: runner.os == 'Windows'
        run: |
          if ($env:STAGE -eq "production") {
            pnpm release
          } else {
            pnpm release --preRelease=preview
          }

      - name: Get version (*nix)
        if: runner.os != 'Windows'
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Get version (Windows)
        if: runner.os != 'Windows'
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $env:GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          prerelease: ${{ vars.STAGE != 'production' }}
          draft: true
          files: "./artifacts/**/*"

      - name: Push changes
        run: git push

      - name: Merge with development
        run: |
          git checkout development
          git merge ${GITHUB_REF#refs/heads/} -m "chore(release): merge $(git describe --tags `git rev-list --tags --max-count=1`) into development"
          git push origin development
